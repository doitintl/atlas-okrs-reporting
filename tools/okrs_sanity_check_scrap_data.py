#!/usr/bin/env python3
"""
Enhanced OKRs Sanity Check Script

This script performs a comprehensive sanity check on OKRs from the CSV generated by the recursive method,
focusing only on team members from teams.csv and adding two new checks:
1. Progress Type should be ATTACHED_METRIC (has a metric)
2. Lineage should be populated

Usage:
    python okrs_sanity_check_scrap_data.py

Dependencies are managed in pyproject.toml. Install with: uv sync
"""

import pandas as pd
from tabulate import tabulate
import os

# Config
TEAMS_CSV = "teams.csv"
LATEST_CSV_PATTERN = "scraped/export-*_processed*.csv"

def find_latest_csv():
    """Find the most recent processed CSV file"""
    import glob
    csv_files = glob.glob(LATEST_CSV_PATTERN)
    if not csv_files:
        raise FileNotFoundError(f"No CSV files found matching pattern: {LATEST_CSV_PATTERN}")
    
    # Sort by modification time and get the most recent
    latest_file = max(csv_files, key=os.path.getmtime)
    return latest_file

def load_team_members():
    """Load team members from teams.csv"""
    if not os.path.exists(TEAMS_CSV):
        raise FileNotFoundError(f"Teams file not found: {TEAMS_CSV}")
    
    teams_df = pd.read_csv(TEAMS_CSV)
    team_members = set(teams_df['name'].str.strip())
    return teams_df, team_members

def enhanced_okr_sanity_check(row):
    """
    Enhanced sanity check for OKRs with additional requirements:
    - Target Date: not empty
    - Teams: not empty  
    - Parent Goal: not empty
    - Owner: not empty
    - Progress Type: should be ATTACHED_METRIC (NEW)
    - Lineage: should be populated (NEW)
    """
    missing = []
    
    # Original checks
    if not row.get('Target Date') or str(row.get('Target Date')).strip() in ['', 'null']:
        missing.append('Target Date')
    if not row.get('Teams') or str(row.get('Teams')).strip() in ['', 'null']:
        missing.append('Teams')
    if not row.get('Parent Goal') or str(row.get('Parent Goal')).strip() in ['', 'null']:
        missing.append('Parent Goal')
    if not row.get('Owner') or str(row.get('Owner')).strip() in ['', 'null']:
        missing.append('Owner')
    
    # NEW checks
    progress_type = str(row.get('Progress Type', '')).strip()
    if not progress_type or progress_type in ['', 'null', 'NONE']:
        missing.append('Progress Type (Metric)')
    
    lineage_value = str(row.get('Lineage', '')).strip()
    if not lineage_value or lineage_value in ['', 'null', 'nan']:
        missing.append('Lineage')
    
    return missing

def checkmark(val):
    """Return checkmark or X based on boolean value"""
    return '✅' if val else '❌'

def main():
    print("🔍 Enhanced OKRs Sanity Check")
    print("=" * 60)
    print()
    
    # Load team members
    print("📋 Loading team members...")
    teams_df, team_members = load_team_members()
    print(f"✅ Loaded {len(team_members)} team members from {len(teams_df['team'].unique())} teams")
    print()
    
    # Find and load latest CSV
    print("📊 Finding latest OKRs CSV...")
    latest_csv = find_latest_csv()
    print(f"✅ Using: {latest_csv}")
    
    okrs_df = pd.read_csv(latest_csv)
    print(f"📊 Total OKRs in CSV: {len(okrs_df)}")
    
    # Filter only team members' OKRs
    team_okrs = okrs_df[okrs_df['Owner'].str.strip().isin(team_members)].copy()
    print(f"🎯 OKRs from team members: {len(team_okrs)}")
    print()
    
    if team_okrs.empty:
        print("❌ No OKRs found for team members!")
        return
    
    # Perform enhanced sanity check
    print("🔍 Performing enhanced sanity check...")
    team_okrs['sanity_missing'] = team_okrs.apply(enhanced_okr_sanity_check, axis=1)
    team_okrs['is_sane'] = team_okrs['sanity_missing'].apply(lambda x: len(x) == 0)
    
    # Calculate statistics
    total_okrs = len(team_okrs)
    sane_okrs = len(team_okrs[team_okrs['is_sane']])
    malformed_okrs = total_okrs - sane_okrs
    
    print(f"📊 SUMMARY:")
    print(f"   Total OKRs: {total_okrs}")
    print(f"   ✅ Healthy OKRs: {sane_okrs} ({sane_okrs/total_okrs*100:.1f}%)")
    print(f"   ❌ Malformed OKRs: {malformed_okrs} ({malformed_okrs/total_okrs*100:.1f}%)")
    print()
    
    # Show statistics by team
    print("📋 OKRs Health by Team:")
    print("-" * 40)
    
    team_stats = []
    for team in teams_df['team'].unique():
        team_members_list = teams_df[teams_df['team'] == team]['name'].tolist()
        team_okrs_filtered = team_okrs[team_okrs['Owner'].str.strip().isin(team_members_list)]
        
        if not team_okrs_filtered.empty:
            team_total = len(team_okrs_filtered)
            team_sane = len(team_okrs_filtered[team_okrs_filtered['is_sane']])
            team_malformed = team_total - team_sane
            health_percentage = (team_sane / team_total * 100) if team_total > 0 else 0
            
            team_stats.append({
                'Team': team,
                'Total OKRs': team_total,
                'Healthy': team_sane,
                'Malformed': team_malformed,
                'Health %': f"{health_percentage:.1f}%"
            })
    
    if team_stats:
        team_stats_df = pd.DataFrame(team_stats)
        
        # Calculate totals row
        total_okrs = team_stats_df['Total OKRs'].sum()
        total_healthy = team_stats_df['Healthy'].sum()
        total_malformed = team_stats_df['Malformed'].sum()
        total_health_percentage = (total_healthy / total_okrs * 100) if total_okrs > 0 else 0
        
        # Add totals row
        total_row = pd.DataFrame([{
            'Team': 'TOTAL',
            'Total OKRs': total_okrs,
            'Healthy': total_healthy,
            'Malformed': total_malformed,
            'Health %': f"{total_health_percentage:.1f}%"
        }])
        
        team_stats_df = pd.concat([team_stats_df, total_row], ignore_index=True)
        
        print(tabulate(team_stats_df, headers="keys", tablefmt="fancy_grid", showindex=False))
        print()
    
    # Show Progress Type distribution for malformed OKRs
    print("🔍 Progress Type Distribution (Malformed OKRs):")
    print("-" * 50)
    
    malformed_okrs_data = team_okrs[~team_okrs['is_sane']]
    if not malformed_okrs_data.empty:
        progress_type_counts = malformed_okrs_data['Progress Type'].value_counts()
        
        progress_breakdown = []
        for progress_type, count in progress_type_counts.items():
            percentage = (count / len(malformed_okrs_data) * 100)
            progress_breakdown.append({
                'Progress Type': progress_type if progress_type and str(progress_type).strip() != 'nan' else 'Not Set/Empty',
                'Count': count,
                'Percentage': f"{percentage:.1f}%"
            })
        
        progress_df = pd.DataFrame(progress_breakdown)
        print(tabulate(progress_df, headers="keys", tablefmt="fancy_grid", showindex=False))
        print()
        
        # Also show what Progress Types the healthy OKRs have
        print("✅ Progress Type Distribution (Healthy OKRs):")
        print("-" * 45)
        
        healthy_okrs_data = team_okrs[team_okrs['is_sane']]
        if not healthy_okrs_data.empty:
            healthy_progress_counts = healthy_okrs_data['Progress Type'].value_counts()
            
            healthy_breakdown = []
            for progress_type, count in healthy_progress_counts.items():
                percentage = (count / len(healthy_okrs_data) * 100)
                healthy_breakdown.append({
                    'Progress Type': progress_type if progress_type and str(progress_type).strip() != 'nan' else 'Not Set/Empty',
                    'Count': count,
                    'Percentage': f"{percentage:.1f}%"
                })
            
            healthy_progress_df = pd.DataFrame(healthy_breakdown)
            print(tabulate(healthy_progress_df, headers="keys", tablefmt="fancy_grid", showindex=False))
            print()
    else:
        print("No malformed OKRs found!")
        print()
    
    # Show malformed OKRs details
    malformed_team_okrs = team_okrs[~team_okrs['is_sane']]
    if not malformed_team_okrs.empty:
        print(f"❌ Malformed OKRs Details ({len(malformed_team_okrs)} total):")
        print("-" * 60)
        
        malformed_table = []
        for _, row in malformed_team_okrs.iterrows():
            # Check each requirement
            has_target_date = 'Target Date' not in row['sanity_missing']
            has_teams = 'Teams' not in row['sanity_missing'] 
            has_parent = 'Parent Goal' not in row['sanity_missing']
            has_owner = 'Owner' not in row['sanity_missing']
            has_metric = 'Progress Type (Metric)' not in row['sanity_missing']
            has_lineage = 'Lineage' not in row['sanity_missing']
            
            malformed_table.append([
                row.get('Owner', ''),
                (row.get('Name', '')[:40] + "...") if len(str(row.get('Name', ''))) > 40 else row.get('Name', ''),
                checkmark(has_target_date),
                checkmark(has_teams),
                checkmark(has_parent),
                checkmark(has_owner),
                checkmark(has_metric),
                checkmark(has_lineage)
            ])
        
        headers = [
            "Owner", 
            "OKR Name", 
            "Target Date", 
            "Teams", 
            "Parent Goal", 
            "Owner (OKR)",
            "Has Metric",
            "Has Lineage"
        ]
        
        print(tabulate(
            malformed_table,
            headers=headers,
            tablefmt="fancy_grid",
            showindex=False
        ))
        print()
    else:
        print("🎉 All OKRs for team members pass the enhanced sanity check!")
        print()
    
    # Show people without OKRs
    print("👥 People without OKRs by Team:")
    print("-" * 40)
    
    people_with_okrs = set(team_okrs['Owner'].str.strip())
    missing_okrs_by_team = []
    
    for team in teams_df['team'].unique():
        team_members_list = set(teams_df[teams_df['team'] == team]['name'].str.strip())
        people_without_okrs = team_members_list - people_with_okrs
        
        if people_without_okrs:
            missing_okrs_by_team.append([f"📋 {team}", ""])
            for person in sorted(people_without_okrs):
                missing_okrs_by_team.append([f"   • {person}", ""])
            missing_okrs_by_team.append(["", ""])  # Separator
    
    if missing_okrs_by_team:
        # Remove last separator
        if missing_okrs_by_team[-1] == ["", ""]:
            missing_okrs_by_team.pop()
        
        print(tabulate(
            missing_okrs_by_team,
            headers=["Team / Person", ""],
            tablefmt="fancy_grid",
            showindex=False
        ))
    else:
        print("🎉 All team members have OKRs!")
    
    print()
    print("✅ Enhanced sanity check completed!")

if __name__ == "__main__":
    main() 